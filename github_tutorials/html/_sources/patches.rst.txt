============================
Submitting patches by Email
============================

Generating patches
------------------

The **git format-patch** will generate a patch-file-per-commit in the range required, formatted ready to go as mail messages in mbox format. The --to can be specified for which mail address the patches should be sent to â€“ but the sending is done separately. 

From the branch having changes, run following

::

	git format-patch [BASE_BRANCH_NAME]

Another version is 

To generate patches from the topmost commits from a specific sha1 hash:

::

	git format-patch -<n> <SHA1>

To specify sender to which you want to send the patch, use *--to* option

::
	
	git format-patch --to erabhishektiwarics@gmail.com -1 <SHA1>


Sending Patch
=============

These patch files can then be transmitted via mail using the *git send-email* command. This connects to the given SMTP server (either the one from your global ~/.gitconfig or the project's .gitconfig, or the one specified on the command line) and then sends each patch file as a separate e-mail: 

::

	git send-email --smtp-server=smtp.gmail.com *.patch

How to use *send-email*
-------------------------

Installing send-email
---------------------

You probably already have git already installed, but that's not necessarily enough to have also the send-email command available. You can check if send-email is available by running "git send-email --help". If it shows the man page for send-email, then send-email is available. Otherwise, you need to install the send-email command. Your distribution probably has a package for it; on Debian the package name is "git-email".

Configuring Your Name and Email Address
----------------------------------------

You should tell git your name and email address. You have probably done this already, but if not, run these commands:

::

	git config --global user.name "My Name"
	git config --global user.email "myemail@example.com"

Configuring the Mail Sending Options
-------------------------------------

git send-email sends the emails through your SMTP server, so you need to configure the server parameters. Refer to your email provider documentation to find the right parameters. This is how I would configure my mail settings:

::

	git config --global sendemail.smtpencryption tls
	git config --global sendemail.smtpserver mail.messagingengine.com
	git config --global sendemail.smtpuser tanuk@fastmail.fm
	git config --global sendemail.smtpserverport 587
	git config --global sendemail.smtppass hackme

Storing the password in the git configuration file is obviously a security risk. It's not mandatory to configure the password. If it's not configured, git send-email will ask it every time the command is used.

Configuring the Default Destination Address
--------------------------------------------

For PulseAudio, the patches should be sent to our mailing list. In order to avoid having to remember it and retyping it all the time, you can configure the address to be used by default by git send-email. As you may contribute to many projects using git, it does not make sense to set this option globally so instead we'll only set it in our clone of the PulseAudio code.

::

	git config sendemail.to pulseaudio-discuss@lists.freedesktop.org

Using the send-email Command
-------------------------------

Sending a Single Patch
-------------------------

Sending the last commit in the current branch:

::

	git send-email -1

Sending some other commit:

::

	git send-email -1 <SHA1>


Adding Patch Version Information

::

	git send-email -v2 -1

Apply Patches
==============

Once the patches have been created, how do you apply them into a local clone? If you have a patch file, you can apply it with *git apply*:

::

	git apply *.patch

Note, however, that this approach does not recreate the state of the world as it was on the sender's repository. Instead, the patch is applied but it only makes local changes to the repository's content instead; it does not recreate the commit (and more specifically, the hash of that commit). You can specify *git apply --index* and *git apply --cached* to get the changes put into the staging area, but this does not recreate the same commit as before. 

To recreate the commit as it was exactly requires the use of *git am*, which stands for apply mailbox. This runs through a mailbox (which may have one or more patches in it) and recreates a commit for each one of those patches. 

 Fortunately, the output generated by git patch is already in mbox format; it's the purpose of the otherwise dummy From 9c9c692df50e5a9eb91b41cc86f57212afd78ef9 Mon Sep 17 00:00:00 2001 line at the top of the patch file. As a result, the patches can be treated as one message per mbox, and then applied in batch to the changes which get sent.

In fact, since mbox elements can be concatenated together, this permits patch files to be concatenated together to form a larger patch file, which can be sent as a single unit via another transfer mechanism and then applied on the remote side. 
